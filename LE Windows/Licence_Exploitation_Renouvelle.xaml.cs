using System;
using System.Windows;
using System.Windows.Controls;
using System.Linq;
using Word = Microsoft.Office.Interop.Word;
using System.Windows.Media;
using System.Windows.Input;
using System.Threading.Tasks;
using System.Threading;
using System.Collections.Generic;
using System.Data;

namespace Projet_Mines_Official
{
    /// <summary>
    /// Interaction logic for Licence_Exploitation_Renouvelle.xaml
    /// </summary>
    public partial class Licence_Exploitation_Renouvelle : Window
    {
        public Permis Permis { get; set; }
        int? CurrentNumeroDemmand;
        int? CurrentNumeroPermis;
        public Licence_Exploitation_Renouvelle(Permis permis)
        {
            InitializeComponent();
            this.Permis = permis;
            this.DataContext = this.Permis;
            InitializeControls();
            this.CurrentNumeroDemmand = this.Permis.Num_Demmande;
            this.CurrentNumeroPermis = this.Permis.Num_Permis;
            RemplirLicence_PermisGrid();
            this.Closing += this.Window_Closing;
        }
        public void RemplirLicence_PermisGrid()
        {
            List<Permis> licence_Permis = this.Permis.Licence_Permis.ToList();
            licence_Permis.Reverse();
            DataGridLicencePermis.ItemsSource = null;
            DataGridLicencePermis.Items.Clear();
            DataGridLicencePermis.ItemsSource = licence_Permis;
            DataGridLicencePermis.Items.Refresh();
        }
        internal static void ShowExistingPermis(Permis permis)
        {
            new Licence_Exploitation_Renouvelle(permis).ShowDialog();
        }

        private void InitializeControls()
        {
            BindDatePickers();
            BindTextBoxes();

        }

        #region Fill data 
        private void BindDatePickers()
        {
            Date_Depot.SetBinding(DatePicker.SelectedDateProperty, "Date_Depot");
            Date_Decision.SetBinding(DatePicker.SelectedDateProperty, "Date_Decision");
            Date_Echeance.SetBinding(DatePicker.SelectedDateProperty, "Echeance");
            Date_Institision.SetBinding(DatePicker.SelectedDateProperty, "Date_Institition");
        }
        private void BindTextBoxes()
        {
            //Set Binding For
            //Titulaire Information
            NumeroExPermis.SetBinding(TextBox.TextProperty, "Ex_Permis.Num_Permis");
            Numero_Demande.SetBinding(TextBox.TextProperty, "Num_Demmande");
            Nom_Demandeur.SetBinding(TextBox.TextProperty, "Titulaire.Nom_Demandeur");
            Status_Demandeur.SetBinding(TextBox.TextProperty, "Titulaire.status_Demandeur");
            Raison_Social.SetBinding(TextBox.TextProperty, "Titulaire.Raison_Social");
            Nom_Societe.SetBinding(TextBox.TextProperty, "Titulaire.Nom_Societe");
            Numero_CNSS.SetBinding(TextBox.TextProperty, "Titulaire.Numero_Cnss");
            Domicile_Demandeur.SetBinding(TextBox.TextProperty, "Titulaire.Election_Domicile");
            Registre_Commerce.SetBinding(TextBox.TextProperty, "Titulaire.Registre_Commerce");
            Taxe_Prof.SetBinding(TextBox.TextProperty, "Titulaire.Taxe_Prof");
            Nom_Site.SetBinding(TextBox.TextProperty, "Titulaire.Nom_Site");
            Effective.SetBinding(TextBox.TextProperty, "Titulaire.Effictif");
            //Area Information
            NumPermisCheckBox.SetBinding(CheckBox.IsCheckedProperty, "isDecisionSigne");
            //suivi decision information
            Numero_Permis.SetBinding(TextBox.TextProperty, "Num_Permis");
        }
        #endregion
        #region update data
        private void Window_Closing(object sender, System.ComponentModel.CancelEventArgs e)
        {
            Numero_Demande.Focus();
            NumeroExPermis.Focus();
            //update Etat Permis
            if (Numero_Permis.Text != "0")
                PermisState.updateEtat(this.Permis, EtatPermis.Permis);
            Global.context.SaveChanges();
            Global.Home.RemplirDataGrid();
        }
        #endregion
        #region Chevauchemnet area
        private Button GetChevauchementElement(int NumPermis)
        {
            Button btn = new Button()
            {
                Content = NumPermis.ToString(),
                VerticalAlignment = VerticalAlignment.Center,
                Background = Brushes.White,
                BorderBrush = Brushes.Black,
                BorderThickness = new Thickness(1),
                Margin = new Thickness(10, 0, 0, 0),
                Foreground = Brushes.Gray
            };
            return btn;
        }
        #endregion
        #region Generation Des Rapport
        private void Generer_Decision_Click(object sender, RoutedEventArgs e)
        {
            documentsWord dw = new documentsWord();
            string societe = Nom_Societe.Text;
            string Num_PR = Numero_Permis.Text;
            string date_decision = Date_Decision.Text;
            string date_plus_trois = Date_Decision.SelectedDate.Value.AddYears(3).ToString();
            DocumentGenerator.GenerateDocument(RapportPath.Decision_PR.Value,
                (Word.Application wordApp) =>
                {
                    DocumentGenerator.FindAndReplace(wordApp, "<societe>", societe);
                    DocumentGenerator.FindAndReplace(wordApp, "<Num_PR>", Num_PR);
                    DocumentGenerator.FindAndReplace(wordApp, "<date_decision>", date_decision);
                    DocumentGenerator.FindAndReplace(wordApp, "<date_plus_trois>", date_plus_trois);
                    DocumentGenerator.FindAndReplace(wordApp, "<date>", $"{DateTime.Now.Day} / {DateTime.Now.Month} /{DateTime.Now.Year}");
                }

                , dw.documentsContainer, () => { dw.Show(); });
            PermisState.updateEtat(this.Permis, EtatPermis.Decision);
        }


        private void Invitation_Enquete_Click(object sender, RoutedEventArgs e)
        {

        }
        private void Rejet_demande_Click(object sender, RoutedEventArgs e)
        {
            documentsWord dw = new documentsWord();

            string societe = Nom_Societe.Text;
            string Num_PR = Numero_Permis.Text;
            DocumentGenerator.GenerateDocument(RapportPath.Revocation_PR.Value,
                (Word.Application wordApp) =>
                {

                    DocumentGenerator.FindAndReplace(wordApp, "<societe>", societe);
                    DocumentGenerator.FindAndReplace(wordApp, "<Num_PR>", Num_PR);
                    DocumentGenerator.FindAndReplace(wordApp, "<date>", $"{DateTime.Now.Day} / {DateTime.Now.Month} /{DateTime.Now.Year}");
                }

                , dw.documentsContainer, () => { dw.Show(); });
        }
        private void PremierMiseEnDemeure_Click(object sender, RoutedEventArgs e)
        {
            documentsWord dw = new documentsWord();

            string societe = Nom_Societe.Text;
            string Num_PR = Numero_Permis.Text;
            DocumentGenerator.GenerateDocument(RapportPath.premier_mise_demeure.Value,
                (Word.Application wordApp) =>
                {

                    DocumentGenerator.FindAndReplace(wordApp, "<societe>", societe);
                    DocumentGenerator.FindAndReplace(wordApp, "<Num_PR>", Num_PR);
                    DocumentGenerator.FindAndReplace(wordApp, "<date>", $"{DateTime.Now.Day} / {DateTime.Now.Month} /{DateTime.Now.Year}");
                }

                , dw.documentsContainer, () => { dw.Show(); });
        }

        private void DeuxiemeMiseEnDemeure_Click(object sender, RoutedEventArgs e)
        {
            documentsWord dw = new documentsWord();

            string societe = Nom_Societe.Text;
            string Num_PR = Numero_Permis.Text;
            DocumentGenerator.GenerateDocument(RapportPath.deuxieme_mise_demeure.Value,
                (Word.Application wordApp) =>
                {

                    DocumentGenerator.FindAndReplace(wordApp, "<societe>", societe);
                    DocumentGenerator.FindAndReplace(wordApp, "<date>", $"{DateTime.Now.Day} / {DateTime.Now.Month} /{DateTime.Now.Year}");
                }

                , dw.documentsContainer, () => { dw.Show(); });
        }
        #endregion
        #region validation
        private void GetOnlyNumbers_KeyDown(object sender, KeyEventArgs e)
        {
            List<Key> keys = new List<Key>()
            {
                Key.D0,
                Key.D1,
                Key.D2,
                Key.D3,
                Key.D4,
                Key.D5,
                Key.D6,
                Key.D7,
                Key.D8,
                Key.D9,
                Key.NumPad0,
                Key.NumPad1,
                Key.NumPad2,
                Key.NumPad3,
                Key.NumPad4,
                Key.NumPad5,
                Key.NumPad6,
                Key.NumPad7,
                Key.NumPad8,
                Key.NumPad9,
            };

            if (!keys.Contains(e.Key))
            {
                TextBox textBox = sender as TextBox;
                textBox.BorderBrush = Brushes.Red;
                Task.Factory.StartNew(() =>
                {
                    Thread.Sleep(2000);
                    Application.Current.Dispatcher.Invoke(() =>
                    {
                        textBox.BorderBrush = (SolidColorBrush)new BrushConverter().ConvertFromString("#FF2196F3");
                    });
                });
                e.Handled = true;
            }
        }
        #endregion

        private void Exporter_excel_Click(object sender, RoutedEventArgs e)
        {
            ExcelGenerator.ExportExcel(this,this.Permis);
        }
        private void Numero_Demande_MouseLeave(object sender, MouseEventArgs e)
        {
            List<int?> numerosDemmandes = Global.context.Les_Permis.Select(p => p.Num_Demmande).ToList();
            numerosDemmandes.Remove(CurrentNumeroDemmand);
            if (string.IsNullOrEmpty(Numero_Demande.Text))
            {
                Numero_Demande.Text = CurrentNumeroDemmand.ToString();
                return;
            }
            int EnteredNumeroDemmand = Convert.ToInt32(Numero_Demande.Text);
            if (numerosDemmandes.Contains(EnteredNumeroDemmand))
            {
                MessageBox.Show("Ce Numero De Demmande Deja Exist .","Message");
                Numero_Demande.Text = CurrentNumeroDemmand.ToString();
            }
        }
        private void Numero_Permis_MouseLeave(object sender, MouseEventArgs e)
        {
            List<int?> numerosPermis = Global.context.Les_Permis.Select(p => p.Num_Permis).Distinct().ToList();
            numerosPermis.Remove(CurrentNumeroPermis);
            numerosPermis.Remove(0);
            if (string.IsNullOrEmpty(Numero_Permis.Text))
            {
                Numero_Permis.Text = CurrentNumeroPermis.ToString();
                return;
            }
            int EnteredNumeroPermis = Convert.ToInt32(Numero_Permis.Text);
            if (numerosPermis.Contains(EnteredNumeroPermis))
            {
                MessageBox.Show("Ce Numero De Permis Deja Exist .","Message");
                Numero_Permis.Text = CurrentNumeroPermis.ToString();
            }
        }
        #region Le Code De PRR
        private void AfficherExPermis_Click(object sender, RoutedEventArgs e)
        {
            int permisId = Global.context.Les_Permis.Where(p => p.Num_Permis == this.Permis.Ex_Permis.Num_Permis).Single().PermisId;
            Permis_Recherche.ShowExistingPermis(this.Permis);
        }
        #endregion
        private void Afficher_Area_Click(object sender, RoutedEventArgs e)
        {
            Permis permis = (Permis)DataGridLicencePermis.SelectedItem;
            Licence_Renouvelle_Area.Show(permis);
        }
        private void Afficher_Permis_Click(object sender, RoutedEventArgs e)
        {
            Permis permis = (Permis)DataGridLicencePermis.SelectedItem;
            switch (permis.Type_PermisId)
            {
                case TypePermis.PR:
                    Permis_Recherche.ShowExistingPermis(permis);
                    break;
                case TypePermis.PRR:
                    Permis_Recherche_Rennouvelle.ShowExistingPermis(permis);
                    break;
            }
        }
        private void Refrech_Click(object sender, RoutedEventArgs e)
        {
            RemplirLicence_PermisGrid();
        }
        private void Supprimer_Click(object sender, RoutedEventArgs e)
        {
            if (this.Permis.Licence_Permis.Count == 1)
            {
                MessageBox.Show("tu doit avoir au moins 1 permis dans une licence","Message");
                return;
            }
            MessageBoxResult result = MessageBox.Show("vous voulez supprimer cette permis", "Attention", MessageBoxButton.YesNo);
            if (result == MessageBoxResult.Yes)
            {
                Permis deletedPermis = (Permis)DataGridLicencePermis.SelectedItem;
                this.Permis.Licence_Permis.Remove(deletedPermis);
                Global.context.SaveChanges();
                RemplirLicence_PermisGrid();
            }
        }
        private void GenererRapport_Click(object sender, RoutedEventArgs e)
        {
            Numero_Demande.Focus();
            Nom_Demandeur.Focus();
            Global.context.SaveChanges();
            Rapport_LEE.Show(this.Permis);
        }
        bool isNavigationListClosed = true;
        private void NaviagationList_Click(object sender, RoutedEventArgs e)
        {
            if (isNavigationListClosed)
            {
                NavigationList.Height = Double.NaN;
                isNavigationListClosed = false;
            }
            else
            {
                NavigationList.Height = 0;
                isNavigationListClosed = true;
            }
        }
        private void Renouveller_Click(object sender, RoutedEventArgs e)
        {
            if (Numero_Permis.Text == "0")
            {
                MessageBox.Show("il faut ajouter numero permis avant de renouveller", "Message");
                return;
            }
            if (this.Permis.Etat_PermisId == EtatPermis.Renouvelle)
            {
                MessageBox.Show("Cette licence deja renouvelle", "Message");
                return;
            }
            MessageBoxResult result = MessageBox.Show("Vous veullez renouveller ce licence", "Message");
            if (result == MessageBoxResult.No) return;
            Permis newPermis = new Permis(this.Permis.Area, this.Permis.Titulaire);
            Global.context.Les_Permis.Add(newPermis);
            this.Permis.Licence_Permis.ToList().ForEach(p => newPermis.Licence_Permis.Add(p));
            //newPermis.Licence_Permis = this.Permis.Licence_Permis;
            newPermis.Ex_PermisId = this.Permis.PermisId;
            newPermis.Type_PermisId = TypePermis.LER;
            this.Permis.Etat_PermisId = EtatPermis.Renouvelle;
            Global.context.SaveChanges();
            Licence_Exploitation_Renouvelle.ShowExistingPermis(newPermis);
            this.Close();
        }
    }
}

